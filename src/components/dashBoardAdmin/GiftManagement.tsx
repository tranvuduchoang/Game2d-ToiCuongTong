import { useState } from 'react';
import { Card } from '../game/ui/card';
import { Button } from '../game/ui/button';
import { Input } from '../game/ui/input';
import { Label } from '../game/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../game/ui/select';
import { Textarea } from '../game/ui/textarea';
import { Badge } from '../game/ui/badge';
import { Checkbox } from '../game/ui/checkbox';
import { Search, Gift, Send, User, Sparkles, Sword, Star, Gem } from 'lucide-react';
import { toast } from 'sonner';

interface GiftItem {
  id: string;
  name: string;
  type: 'sp' | 'technique' | 'item' | 'resource';
  icon: string;
  description: string;
  rarity: 'common' | 'rare' | 'epic' | 'legendary';
}

interface Player {
  id: string;
  username: string;
  level: number;
  sect: string;
  status: 'online' | 'offline';
}

export function GiftManagement() {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedPlayer, setSelectedPlayer] = useState<Player | null>(null);
  const [selectedGifts, setSelectedGifts] = useState<string[]>([]);
  const [giftAmounts, setGiftAmounts] = useState<Record<string, number>>({});
  const [giftMessage, setGiftMessage] = useState('');

  // Mock data
  const players: Player[] = [
    { id: '1', username: 'TieuDaoThan123', level: 45, sect: 'Thi√™n Ki·∫øm T√¥ng', status: 'online' },
    { id: '2', username: 'VoLamKiemKhach', level: 78, sect: 'Huy·ªÅn Thi√™n T√¥ng', status: 'offline' },
    { id: '3', username: 'ThienHaVoSong', level: 23, sect: 'V√¥ C·ª±c T√¥ng', status: 'online' },
    { id: '4', username: 'KiemTongChiTon', level: 56, sect: 'Thi√™n Ki·∫øm T√¥ng', status: 'online' },
    { id: '5', username: 'HuyenThienDaoNhan', level: 89, sect: 'Huy·ªÅn Thi√™n T√¥ng', status: 'offline' }
  ];

  const giftItems: GiftItem[] = [
    {
      id: 'sp_free',
      name: 'ƒêi·ªÉm SP t·ª± do',
      type: 'sp',
      icon: '‚≠ê',
      description: 'ƒêi·ªÉm k·ªπ nƒÉng c√≥ th·ªÉ ph√¢n b·ªï t·ª± do',
      rarity: 'common'
    },
    {
      id: 'gold',
      name: 'V√†ng',
      type: 'resource',
      icon: 'üí∞',
      description: 'Ti·ªÅn t·ªá ch√≠nh trong game',
      rarity: 'common'
    },
    {
      id: 'spirit_stone',
      name: 'Linh th·∫°ch',
      type: 'resource',
      icon: 'üíé',
      description: 'Ti·ªÅn t·ªá cao c·∫•p d√πng trong tu luy·ªán',
      rarity: 'rare'
    },
    {
      id: 'technique_basic',
      name: 'C√¥ng ph√°p C∆° B·∫£n',
      type: 'technique',
      icon: 'üìú',
      description: 'C√¥ng ph√°p tu luy·ªán c·∫•p ƒë·ªô c∆° b·∫£n',
      rarity: 'common'
    },
    {
      id: 'technique_advanced',
      name: 'C√¥ng ph√°p Cao C·∫•p',
      type: 'technique',
      icon: 'üìã',
      description: 'C√¥ng ph√°p tu luy·ªán c·∫•p ƒë·ªô cao c·∫•p',
      rarity: 'epic'
    },
    {
      id: 'technique_legendary',
      name: 'C√¥ng ph√°p Huy·ªÅn Tho·∫°i',
      type: 'technique',
      icon: 'üìö',
      description: 'C√¥ng ph√°p tu luy·ªán c·∫•p ƒë·ªô huy·ªÅn tho·∫°i',
      rarity: 'legendary'
    },
    {
      id: 'weapon_sword',
      name: 'Thi√™n Ki·∫øm',
      type: 'item',
      icon: '‚öîÔ∏è',
      description: 'Ki·∫øm ph√°p kh√≠ c·∫•p cao',
      rarity: 'epic'
    },
    {
      id: 'armor_robe',
      name: 'Thi√™n T·∫±m B·∫£o Y',
      type: 'item',
      icon: 'üëò',
      description: '√Åo gi√°p ph√≤ng th·ªß tuy·ªát ƒë·ªânh',
      rarity: 'legendary'
    },
    {
      id: 'pill_healing',
      name: 'H·ªìi Thi√™n ƒêan',
      type: 'item',
      icon: 'üíä',
      description: 'ƒêan d∆∞·ª£c h·ªìi ph·ª•c th∆∞∆°ng t√≠ch',
      rarity: 'rare'
    },
    {
      id: 'pill_cultivation',
      name: 'Tu Vi ƒêan',
      type: 'item',
      icon: 'üåü',
      description: 'ƒêan d∆∞·ª£c tƒÉng t·ªëc tu luy·ªán',
      rarity: 'epic'
    }
  ];

  const filteredPlayers = players.filter(player =>
    player.username.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const getRarityColor = (rarity: string) => {
    switch (rarity) {
      case 'legendary':
        return 'bg-gradient-to-r from-yellow-400 to-orange-500 text-black';
      case 'epic':
        return 'bg-gradient-to-r from-purple-400 to-purple-600 text-white';
      case 'rare':
        return 'bg-gradient-to-r from-blue-400 to-blue-600 text-white';
      default:
        return 'bg-gray-500 text-white';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'sp':
        return <Star className="w-4 h-4" />;
      case 'technique':
        return <Sparkles className="w-4 h-4" />;
      case 'item':
        return <Sword className="w-4 h-4" />;
      case 'resource':
        return <Gem className="w-4 h-4" />;
      default:
        return <Gift className="w-4 h-4" />;
    }
  };

  const handleGiftSelection = (giftId: string, checked: boolean) => {
    if (checked) {
      setSelectedGifts([...selectedGifts, giftId]);
      setGiftAmounts({ ...giftAmounts, [giftId]: 1 });
    } else {
      setSelectedGifts(selectedGifts.filter(id => id !== giftId));
      const newAmounts = { ...giftAmounts };
      delete newAmounts[giftId];
      setGiftAmounts(newAmounts);
    }
  };

  const handleAmountChange = (giftId: string, amount: number) => {
    setGiftAmounts({ ...giftAmounts, [giftId]: Math.max(1, amount) });
  };

  const handleSendGifts = () => {
    if (!selectedPlayer) {
      toast.error('Vui l√≤ng ch·ªçn ng∆∞·ªùi ch∆°i ƒë·ªÉ t·∫∑ng qu√†!');
      return;
    }
    
    if (selectedGifts.length === 0) {
      toast.error('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt m√≥n qu√†!');
      return;
    }

    const giftList = selectedGifts.map(giftId => {
      const gift = giftItems.find(g => g.id === giftId);
      return `${gift?.name} x${giftAmounts[giftId] || 1}`;
    }).join(', ');

    toast.success(
      `ƒê√£ g·ª≠i qu√† cho ${selectedPlayer.username}: ${giftList}`,
      { duration: 5000 }
    );

    // Reset form
    setSelectedGifts([]);
    setGiftAmounts({});
    setGiftMessage('');
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-3xl font-bold text-primary">T·∫∑ng qu√† ng∆∞·ªùi ch∆°i</h2>
        <div className="flex items-center gap-2 text-sm text-muted-foreground">
          <Gift className="w-4 h-4" />
          G·ª≠i qu√† t·∫∑ng tr·ª±c ti·∫øp cho ng∆∞·ªùi ch∆°i
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Player Selection */}
        <Card className="p-6 ancient-scroll">
          <h3 className="text-xl font-bold text-primary mb-4">Ch·ªçn ng∆∞·ªùi ch∆°i</h3>
          
          <div className="space-y-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
              <Input
                placeholder="T√¨m ki·∫øm ng∆∞·ªùi ch∆°i..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>

            <div className="max-h-80 overflow-y-auto space-y-2">
              {filteredPlayers.map((player) => (
                <div
                  key={player.id}
                  className={`p-3 rounded-lg border cursor-pointer transition-all ${
                    selectedPlayer?.id === player.id
                      ? 'border-primary bg-primary/10 martial-glow'
                      : 'border-border hover:border-primary/50 hover:bg-secondary/20'
                  }`}
                  onClick={() => setSelectedPlayer(player)}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <User className="w-5 h-5 text-primary" />
                      <div>
                        <p className="font-medium">{player.username}</p>
                        <p className="text-sm text-muted-foreground">
                          Level {player.level} ‚Ä¢ {player.sect}
                        </p>
                      </div>
                    </div>
                    <Badge 
                      className={player.status === 'online' 
                        ? 'bg-green-500/20 text-green-300 border-green-500/30' 
                        : 'bg-gray-500/20 text-gray-400 border-gray-500/30'
                      }
                    >
                      {player.status === 'online' ? 'Tr·ª±c tuy·∫øn' : 'Ngo·∫°i tuy·∫øn'}
                    </Badge>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </Card>

        {/* Gift Selection */}
        <Card className="p-6 ancient-scroll">
          <h3 className="text-xl font-bold text-primary mb-4">Ch·ªçn m√≥n qu√†</h3>
          
          <div className="max-h-80 overflow-y-auto space-y-3">
            {giftItems.map((gift) => (
              <div
                key={gift.id}
                className={`p-3 rounded-lg border transition-all ${
                  selectedGifts.includes(gift.id)
                    ? 'border-primary bg-primary/5'
                    : 'border-border hover:border-primary/50'
                }`}
              >
                <div className="flex items-start gap-3">
                  <Checkbox
                    checked={selectedGifts.includes(gift.id)}
                    onCheckedChange={(checked: boolean) => handleGiftSelection(gift.id, checked)}
                  />
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <span className="text-lg">{gift.icon}</span>
                      <span className="font-medium">{gift.name}</span>
                      {getTypeIcon(gift.type)}
                      <Badge className={`text-xs ${getRarityColor(gift.rarity)}`}>
                        {gift.rarity === 'legendary' ? 'Huy·ªÅn tho·∫°i' :
                         gift.rarity === 'epic' ? 'S·ª≠ thi' :
                         gift.rarity === 'rare' ? 'Hi·∫øm' : 'Th∆∞·ªùng'}
                      </Badge>
                    </div>
                    <p className="text-sm text-muted-foreground mb-2">{gift.description}</p>
                    
                    {selectedGifts.includes(gift.id) && (
                      <div className="flex items-center gap-2">
                        <Label htmlFor={`amount-${gift.id}`} className="text-sm">S·ªë l∆∞·ª£ng:</Label>
                        <Input
                          id={`amount-${gift.id}`}
                          type="number"
                          min="1"
                          value={giftAmounts[gift.id] || 1}
                          onChange={(e) => handleAmountChange(gift.id, parseInt(e.target.value) || 1)}
                          className="w-20 h-8"
                        />
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </Card>
      </div>

      {/* Gift Summary & Send */}
      <Card className="p-6 ancient-scroll">
        <h3 className="text-xl font-bold text-primary mb-4">X√°c nh·∫≠n t·∫∑ng qu√†</h3>
        
        <div className="space-y-4">
          {selectedPlayer && (
            <div className="p-4 bg-secondary/20 rounded-lg">
              <p className="font-medium text-primary">Ng∆∞·ªùi nh·∫≠n: {selectedPlayer.username}</p>
              <p className="text-sm text-muted-foreground">
                Level {selectedPlayer.level} ‚Ä¢ {selectedPlayer.sect} ‚Ä¢ {selectedPlayer.status === 'online' ? 'ƒêang tr·ª±c tuy·∫øn' : 'Ngo·∫°i tuy·∫øn'}
              </p>
            </div>
          )}

          {selectedGifts.length > 0 && (
            <div className="p-4 bg-accent/10 rounded-lg">
              <p className="font-medium text-accent mb-2">Danh s√°ch qu√† t·∫∑ng:</p>
              <div className="space-y-1">
                {selectedGifts.map(giftId => {
                  const gift = giftItems.find(g => g.id === giftId);
                  return (
                    <div key={giftId} className="text-sm">
                      {gift?.icon} {gift?.name} x{giftAmounts[giftId] || 1}
                    </div>
                  );
                })}
              </div>
            </div>
          )}

          <div className="space-y-2">
            <Label htmlFor="message">L·ªùi nh·∫Øn (t√πy ch·ªçn)</Label>
            <Textarea
              id="message"
              placeholder="Nh·∫≠p l·ªùi nh·∫Øn g·ª≠i k√®m qu√† t·∫∑ng..."
              value={giftMessage}
              onChange={(e) => setGiftMessage(e.target.value)}
              rows={3}
            />
          </div>

          <div className="flex justify-end">
            <Button 
              onClick={handleSendGifts}
              disabled={!selectedPlayer || selectedGifts.length === 0}
              className="martial-glow"
            >
              <Send className="w-4 h-4 mr-2" />
              G·ª≠i qu√† t·∫∑ng
            </Button>
          </div>
        </div>
      </Card>
    </div>
  );
}